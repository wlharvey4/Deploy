# -*- mode:org; fill-column:79; -*-
#+TITLE:Deploying a Web Site on AWS
#+DATE:<2019-04-12 Fri 19:17>

* Amazon Route 53
Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web
service.

You can use Route 53 to perform three main functions in any combination:
1. domain registration
2. DNS routing
3. health checking


If you choose to use Route 53 for all three functions, perform the steps in
this order:

1. Register domain names

   Your website needs a name, such as =example.com=.  Route 53 lets you register a
   name for your website or web application, known as a domain name.

   - for an overview, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html][How Domain Registration Works]].
   - for a precedure, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register.html][Registering a New Domain]].
   - For a tutorial that takes you through registering a domain and creating a
     simple website in an Amazon S3 bucket, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/getting-started.html][Getting Started with Amazon
     Route 53]].

2. Route internet traffic to the resources for your domain

   When a user opens a web browser and enters your domain name (=example.com=)
   or subdomain name (=acme.example.com=) in the address bar, Route 53 helps
   connect the browser with your website or web application.

   - For an overview, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html][How Internet Traffic Is Routed to Your Website or Web
     Application]].
   - For procedures, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring.html][Configuring Amazon Route 53 as Your DNS Service]].

3. Check the health of your resources

   Route 53 sends automated requests over the internet to a resource, such as a
   web server, to verify that it's reachable, available, and functional.  You
   also can choose to receive notifications when a resource becomes unavailable
   and choose to route internet traffic away from unhealthy resources.

   - For an overview, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html][How Amazon Route 53 Checks the Health of Your Resources]].
   - For procedures, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html][Creating Amazon Route 53 Health Checks and Configuring
     DNS Failover]].

** Setting Up Amazon Route 53

- https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/setting-up-route-53.html

** Creating a Static Website Using an Amazon S3 Bucket
This Getting Started tutorial shows you how to perform the following tasks:

- Register a domain name, such as example.com[fn:3]
- Create an Amazon S3 bucket and configure it to host a website
- Create a sample website and save the file in your S3 bucket
- Configure Amazon Route 53 to route traffic to your new website
- To transfer an existing domain to Route 53, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html][Transferring Registration for
  a Domain to Amazon Route 53]]


When you're finished, you'll be able to open a browser, enter the name of your
domain, and view your website.

*Notes:*

- When you register a domain, we automatically create a hosted zone that has
  the same name as the domain.  You use the hosted zone to specify where you
  want Route 53 to route traffic for your domain.  The fee for a hosted zone is
  $0.50 per month.  You can delete the hosted zone if you want to avoid this
  charge.

- If you're an existing AWS customer, charges are based on how much data you
  store, on the number of requests for your data, and on the amount of data
  transferred.  For more information, see [[https://aws.amazon.com/s3/pricing/][Amazon S3 Pricing]].

- Before you begin, be sure that you've completed the steps in [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/setting-up-route-53.html][Setting Up
  Amazon Route 53]].

*** Step 1---Register a Domain

*** Step 2---Create an S3 Bucket and Configure It to Host a Website
<<step-2>>You can use S3 to host a static website in a bucket.

1. Open the Amazon S3 console at https://console.aws.amazon.com/s3/.

2. Choose =Create bucket=.

3. For =Bucket Name=, enter the name of your domain, such as =example.com=.

4. For =Region=, choose the region closest to most of your users.

5. Choose =Create=.

6. In the right pane, expand =Permissions=.

7. Choose =Add bucket policy=.

8. Copy the following bucket policy and paste it into a text editor.

   This policy grants everyone on the internet (="Principal":"*"=) permission
   to get the files (="Action":["s3:GetObject"]=) in the S3 bucket that is
   associated with your domain name (="arn:aws:s3:::your-domain-name/*"=):

   #+BEGIN_SRC js :eval no
   {
     "Version":"2012-10-17",
     "Statement":[{
        "Sid":"AddPerm",
        "Effect":"Allow",
        "Principal":"*",
        "Action":[
           "s3:GetObject"
        ],
        "Resource":[
           "arn:aws:s3:::your-domain-name/*"
        ]
      }]
   }
   #+END_SRC

9. In the bucket policy, replace the value =your-domain-name= with the name of
   your domain, such as =example.com=.

10. Choose =Save=.

11. In the right pane, expand =Static website hosting=.

12. Choose =Enable website hosting=.

13. For Index document, enter ~index.html~.

14. Choose =Save=.

*** Step 3---(Optional) Create Another S3 Bucket, for =www.your-domain-name=
In the preceding procedure, you created a bucket for your domain name, such as
=example.com=.  This allows your users to access your website by using your domain
name, such as =example.com=.

If you also want your users to be able to use =www.your-domain-name=, such as
=www.example.com=, to access your sample website, you create a second S3
bucket.  You then configure the second bucket to route traffic to the first
bucket.

To create an S3 bucket for =www.your-domain-name=:

- Choose =Create bucket=.
- For =Bucket Name=, enter =www.your-domain-name=.  For example, if you registered
  the domain name =example.com=, enter =www.example.com=.
- For Region, choose the same region that you created the first bucket in.
- Choose =Create=.
- In the right pane, expand Static website hosting.
- Choose =Redirect all requests to another host name=.
- For =Redirect all requests to=, enter your domain name.
- Choose =Save=.

*** Step 4---Create a Website and Upload It to Your S3 Bucket
Now that you have an S3 bucket to save your website in, you can create the
first page for your website and upload it to (save it in) your bucket.

1. Copy the following text and paste it into a text editor:

   #+BEGIN_SRC html :eval no
   <html>
   <head>
     <title>Amazon Route 53 Getting Started</title>
   </head>

   <body>

     <h1>Routing Internet Traffic to an Amazon S3 Bucket for Your Website</h1>

     <p>For more information, see
       <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/getting-started.html">
         Getting Started with Amazon Route 53
       </a>
       in the <emphasis>Amazon Route 53 Developer Guide</emphasis>.
     </p>

   </body>

   </html>
   #+END_SRC

2 .Save the file with the file name ~index.html~.

3. In the Amazon S3 console, choose the name of the bucket that you created in
   the procedure [[step-2][above]].

4. Choose =Upload=.

5. Choose =Add files=.

6. Follow the on-screen prompts to select ~index.html~, and then choose =Start
   Upload=.

*** Step 5---Route DNS Traffic for Your Domain to Your Website Bucket
You now have a one-page website in your S3 bucket.  To start routing internet
traffic for your domain to your S3 bucket, perform the following procedure.

1. [[https://console.aws.amazon.com/route53/][Open the Route 53 console]]

2. In the navigation pane, choose *Hosted zones*.

3. In the list of hosted zones, choose the name of your domain.

4. Choose =Create Record Set=.[fn:4]

5. Specify the following values:

   - Name ::

             For the first record that you'll create, accept the default value,
             which is the name of your hosted zone and your domain.  This will
             route internet traffic to the bucket that has the same name as
             your domain.

             If you created a second S3 bucket, for =www.your-domain-name=,
             you'll repeat this step to create a second record.  For the second
             record, enter =www=.  This will route internet traffic to the
             =www.your-domain-name= bucket.

   - Type :: Choose =A â€“ IPv4 address=.

   - Alias :: Choose =Yes=.

   - Alias Target ::

                     Enter the name of the region that you created your S3
                     bucket in.  Use the applicable value from the =Website
                     Endpoint= column in the [[https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints][Amazon Simple Storage Service
                     Website Endpoints]] table in the [[https://docs.aws.amazon.com/general/latest/gr/rande.html][AWS Regions and Endpoints]]
                     chapter of the /Amazon Web Services General Reference/.

                     You specify the same value for Alias Target for both
                     records.  Route 53 figures out which bucket to route
                     traffic to based on the name of the record.

   - Routing Policy :: Accept the default value of =Simple=.

   - Evaluate Target Health :: Accept the default value of =No=.

6. Choose =Create=.

7. If you created a second S3 bucket, for =www.your-domain-name=, repeat steps 4
   through 6 to create a record for =www.your-domain-name=.

*** Step 6---Test Your Website
To verify that the website is working correctly, open a web browser and browse
to the following URLs:

- http://your-domain-name :: Displays the index document in the
     =your-domain-name= bucket
- http://www.your-domain-name :: Redirects your request to the your-domain-name
     bucket


In some cases, you might need to clear the cache to see the expected behavior.

*** Step 7---(Optional) Use Amazon CloudFront to Speed Up Distribution of Your Content

* Amazon Simple Storage Service S3
"Object storage built to store and retrieve any amount of data from anywhere"

#+BEGIN_QUOTE
Amazon Simple Storage Service (Amazon S3) is an object storage service that
offers industry-leading scalability, data availability, security, and
performance. This means customers of all sizes and industries can use it to
store and protect any amount of data for a range of use cases, such as
websites, mobile applications, backup and restore, archive, enterprise
applications, IoT devices, and big data analytics. Amazon S3 provides
easy-to-use management features so you can organize your data and configure
finely-tuned access controls to meet your specific business, organizational,
and compliance requirements. Amazon S3 is designed for 99.999999999% (11 9's)
of durability, and stores data for millions of applications for companies all
around the world.
#+END_QUOTE

Amazon Simple Storage Service (S3) is storage for the Internet. It is designed
to make web-scale computing easier for developers.

Amazon S3 has a simple web services interface that you can use to store and
retrieve any amount of data, at any time, from anywhere on the web.

It gives any developer access to the same highly scalable, reliable, fast,
inexpensive data storage infrastructure that Amazon uses to run its own global
network of web sites.

** S3 Basics

*** Sign Up for S3
You will not be charged for Amazon S3 until you use it.

1. Go to https://aws.amazon.com/s3/ and choose Get started with Amazon S3.
2. Follow the on-screen instructions.


AWS will notify you by email when your account is active and available for you
to use.

*** Create a Bucket
Every object in Amazon S3 is stored in a bucket. Before you can store data in
Amazon S3, you must create a bucket.  You are not charged for creating a
bucket; you are charged only for storing objects in the bucket and for
transferring objects in and out of the bucket.

1. Sign in to the AWS Management Console and open the Amazon S3 console at
   https://console.aws.amazon.com/s3/.
2. Choose =Create bucket=.
3. In the =Bucket name= field, type a unique DNS-compliant name for your new
   bucket.  Create your own bucket name using the follow naming guidelines:
   - The name must be unique across all existing bucket names in Amazon S3.
   - After you create the bucket you cannot change the name, so choose wisely.
   - Choose a bucket name that reflects the objects in the bucket because the
     bucket name is visible in the URL that points to the objects that you're
     going to put in your bucket.
4. For =Region=, choose US West (Oregon) as the region where you want the
   bucket to reside.
5. Choose =Create=.

*** Add an Object to a Bucket
An object can be any kind of file: a text file, a photo, a video, and so on.

1. In the =Bucket name= list, choose the name of the bucket that you want to
   upload your object to.
2. Choose =Upload= or =Get started=.
3. In the =Upload= dialog box, choose =Add files= to choose the file to upload.
4. Choose a file to upload, and then choose =Open=.
5. Choose =Upload=.

*** View an Object
You can view information about your object and download the object to your
local computer.

1. In the =Bucket name= list, choose the name of the bucket that you created.
2. In the =Name list=, select the check box next to the object that you
   uploaded, and then choose =Download= on the object overview panel.

*** Move an Object
Now we create a folder and move the object into the folder by copying and
pasting the object.

1. In the =Bucket name= list, choose the name of the bucket that you created.
2. Choose =Create Folder=, type /favorite-pics/ for the folder name, choose
   =None= for the encryption setting for the folder object and then choose
   =Save=.
3. In the =Name list=, select the check box next to the object that you want to
   copy, choose =More=, and then choose =Copy=.
4. In the =Name= list, choose the name of the folder /favorite-pics/.
5. Choose =More=, and then choose =Paste=.
6. Choose =Paste=.

*** Delete an Object and Bucket
If you no longer need to store the object that you uploaded and made a copy of
while going through this guide, you should delete the objects to prevent
further charges.

You can delete the objects individually. Or you can empty a bucket, which
deletes all the objects in the bucket without deleting the bucket.

You can also delete a bucket and all the objects contained in the
bucket. However, if you want to continue to use the same bucket name, don't
delete the bucket. We recommend that you empty the bucket and keep it. After a
bucket is deleted, the name becomes available to reuse, but the name might not
be available for you to reuse for various reasons. For example, it might take
some time before the name can be reused and some other account could create a
bucket with that name before you do.

To delete an object from a bucket:
1. In the =Bucket name= list, choose the name of the bucket that you want to
   delete an object from.
2. In the =Name= list, select the check box next to the object that you want to
   delete, choose =More=, and then choose =Delete=.
3. In the =Delete objects= dialog box, verify that the name of the object you
   selected for deletion is listed, and then choose =Delete=.


To empty a bucket:
1. In the =Bucket name= list, choose the bucket icon next to the name of the
   bucket that you want to empty and then choose =Empty bucket=.
2. In the =Empty bucket= dialog box, type the name of the bucket for
   confirmation and then choose =Confirm=.


To delete a bucket:
1. In the =Bucket name= list, choose the bucket icon next to the name of the
   bucket that you want to delete and then choose =Delete bucket=.
2. In the =Delete bucket= dialog box, type the name of the bucket for delete
   confirmation and then choose =Confirm=.

** Hosting a Static Website on Amazon S3
You can host a static website on Amazon Simple Storage Service (Amazon S3).

#+BEGIN_QUOTE
Static websites deliver HTML, JavaScript, images, video and other files to your
website visitors, and contain no application code. They are best for sites with
few authors and relatively infrequent content changes, typically personal and
simple marketing websites. Static websites are very low cost, provide
high-levels of reliability, require almost no IT administration, and scale to
handle enterprise-level traffic with no additional work.
#+END_QUOTE

On a static website, individual webpages include static content. They might
also contain client-side scripts.

By contrast, a dynamic website relies on server-side processing, including
server-side scripts such as PHP, JSP, or ASP.NET.  Amazon S3 does not support
server-side scripting.

*** Overview
- Deploy a static website using Amazon S3 ::

     Amazon S3 will provide the origin for your website as well as storage for
     your static content.

- Associate your domain name with your website ::

     Amazon Route 53 will tell the Domain Name System (DNS) where to find your
     website.

- Enable your website to load quickly ::

     Amazon CloudFront will create a content delivery network (CDN) that hosts
     your website content in close proximity to your users.

- You will need ::

  - an AWS account to begin provisioning resources to host
    your website.
  - a basic understanding of web technologies and an existing website that you
    can bring to host on AWS.

- Monthly Billing Estimate ::

     The total cost of hosting your static website on AWS will vary depending
     on your usage. Typically, it will cost $1-3/month if you are outside the
     AWS Free Tier limits.  If you qualify for AWS Free Tier and are within the
     limits, hosting your static website will cost around $0.50/month.

     To see a breakdown of the services used and their associated costs, see
     [[https://aws.amazon.com/getting-started/projects/host-static-website/services-costs/][Services Used and Costs]].

- Additional Resources ::

  - [[http://d0.awsstatic.com/whitepapers/Building%2520Static%2520Websites%2520on%2520AWS.pdf][Whitepaper: Hosting Static Websites on AWS]]. In this whitepaper, we cover
    comprehensive architectural guidance for developing, deploying, and
    managing static websites on AWS and provide a recommended approach.

  - [[https://aws.amazon.com/websites/][Website Hosting Solutions on AWS]]. Learn more about how AWS provides cloud
    website hosting solutions to provide flexible, highly scalable, and
    low-cost ways to deliver websites and web applications.

  - [[https://aws.amazon.com/getting-started/][Getting Started Resource Center]]. Need more resources to get started with
    AWS? Visit the Getting Started Resource Center to find tutorials, projects
    and videos to get started with AWS.

  - [[https://amazonlightsail.com/][Simple Virtual Private Servers on Amazon Lightsail]]. Accelerate your
    websites with Lightsail. It provides everything you need to jumpstart your
    website on AWS---compute, storage, and networking---for a low, predictable
    price.

*** Description
To host a static website:
- configure an Amazon S3 bucket for website hosting;
- upload your website content to the bucket.
- associate a domain name for the bucket


It is intentional that everyone in the world will have read access to this
bucket.  That is, in order for your customers to access content at the website
endpoint, you must make all your content publicly readable, e.g., this bucket
must have *public read access*.  To do so, you can use a *bucket policy* or an
*ACL* on an object to grant the necessary permissions.

The website is then available at the AWS Region-specific website endpoint of
the bucket.  The website endpoint of the bucket has a form such as:
: <bucket-name>.s3-website-<AWS-region>.amazonaws.com
: <bucket-name>.s3-website.<AWS-region>.amazonaws.com

Which form is used for the endpoint depends on what Region the bucket is in.
- For a list of AWS Region-specific website endpoints for Amazon S3, see
  [[https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteEndpoints.html][Website Endpoints]].  For a bucket residing in the US West (Oregon) region, the
  website is available at the following endpoint:
  : http://example-bucket.s3-website-us-west-2.amazonaws.com/

- Note that Website endpoints are different from the endpoints where you send
  REST API requests.  For more information about the differences between the
  endpoints, see [[https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteEndpoints.html#WebsiteRestEndpointDiff][Key Differences Between the Amazon Website and the REST API
  Endpoint]].  See also [[https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAPI.html][Making Requests Using the REST API]].

Instead of accessing the website by using an Amazon S3 website endpoint, you
can use your *own domain*, such as =example.com= to serve your content. Amazon
S3, along with Amazon Route 53, supports hosting a website at the root domain.
If you have a registered domain, you can add a DNS CNAME entry to point to the
Amazon S3 website endpoint.

#+BEGIN_QUOTE
For example, if you have registered domain, =www.example-bucket.com=, you could
create a bucket =www.example-bucket.com=, and add a DNS =CNAME= record that
points to =www.example-bucket.com.s3-website-<region>.amazonaws.com=. All
requests to =http://www.example-bucket.com= are routed to
=www.example-bucket.com.s3-website-<region>.amazonaws.com=.
#+END_QUOTE

To configure a bucket for website hosting, you add website configuration to the
bucket.  Note that the Amazon S3 website endpoints do not support HTTPS.
Amazon CloudFront is used to serve HTTPS requests for data from Amazon S3
buckets.

- [[https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-https-requests-s3/][How do I use CloudFront to serve HTTPS requests for my Amazon S3 bucket?]]
- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-cloudfront-to-s3-origin.html][Requiring HTTPS for Communication Between CloudFront and Your Amazon S3 Origin]]

*** Configuring a Bucket for Website Hosting
You can host a static website in an Amazon Simple Storage Service (Amazon S3)
bucket after some configuration.

The required configuration includes:
1. enabling the bucket for website hosting
2. adding index document support
3. adding universal read access permission

**** Enabling Website Hosting
Follow these steps to enable website hosting for your Amazon S3 buckets using
the [[https://console.aws.amazon.com/s3/home][Amazon S3 console]]:

1. Sign in to the AWS Management Console and open the Amazon S3 console at
   https://console.aws.amazon.com/s3/.

2. In the list, choose the bucket that you want to use for your hosted website.

3. Choose the =Properties= tab.

4. Choose =Static website hosting=, and then choose =Use this bucket= to host a
   website.

5. You are prompted to provide the index document and any optional error
   documents and redirection rules that are needed.


**** Configuring Index Document Support
An /index document/ is a webpage that Amazon S3 returns when a request is made
to the root of a website or any subfolder.

#+BEGIN_QUOTE
For example, if a user enters =http://www.example.com= in the browser, the user
is not requesting any specific page. In that case, Amazon S3 serves up the
/index document/, which is sometimes referred to as the /default page/.
#+END_QUOTE

*When you configure your bucket as a website, provide the name of the index
document.* You then upload an object with this name and configure it to be
publicly readable.

***** Index Documents and Folders
In Amazon S3, a *bucket* is /a flat container of objects/; it does not provide
any hierarchical organization as the file system on your computer does. You can
create a /logical hierarchy/ by using object key names that /imply/ a folder
structure.

For example, consider a bucket with three objects and the following key names.

#+BEGIN_EXAMPLE
sample1.jpg
photos/2006/Jan/sample2.jpg
photos/2006/Feb/sample3.jpg
#+END_EXAMPLE

Although these are stored with no physical hierarchical organization, you can
infer the following logical folder structure from the key names.

#+BEGIN_EXAMPLE
sample1.jpg object is at the root of the bucket.
sample2.jpg object is in the photos/2006/Jan subfolder.
sample3.jpg object is in the photos/2006/Feb subfolder.
#+END_EXAMPLE

The folder concept that Amazon S3 console supports is based on object key
names. To continue the previous example, the console displays the examplebucket
with a photos folder.  You can upload objects to the bucket or to the photos
folder within the bucket. If you add the object ~sample.jpg~ to the bucket, the
key name is ~sample.jpg~. If you upload the object to the photos folder, the
object key name is ~photos/sample.jpg~.

If you create such a folder structure in your bucket, *you must have an index
document at each level*.  When a user specifies a URL that resembles a folder
lookup, the presence or absence of a trailing slash determines the behavior of
the website.

For example, the following URL, with a trailing slash, returns the
~photos/index.html~ index document.
: http://example-bucket.s3-website-region.amazonaws.com/photos/

However, if you exclude the trailing slash from the preceding URL, Amazon S3
first looks for an object =photos= in the bucket. If the =photos= object is not
found, then it searches for an index document, ~photos/index.html~. If that
document is found, Amazon S3 returns a =302 Found= message and points to the
~photos/~ key. For subsequent requests to ~photos/~, Amazon S3 returns
~photos/index.html~. If the index document is not found, Amazon S3 returns an
error.

**** Setting Permissions Required for Website Access
When you configure a bucket as a website, *you must make the objects that you
want to serve publicly readable*.  To do this:
- write a bucket policy that grants everyone =s3:GetObject= permission
- if a user requests an object that doesn't exist, Amazon S3 returns HTTP
  response code =404 (Not Found)=
- if the object exists but you haven't granted read permission on it, the
  website endpoint returns HTTP response code =403 (Access Denied)=
- The user can use the response code to infer whether a specific object exists
- If you don't want this behavior, you should not enable website support for
  your bucket


The following sample bucket policy grants everyone access to the objects in the
specified folder.[fn:5]

#+BEGIN_EXAMPLE
{
  "Version":"2012-10-17",
  "Statement":[{
	"Sid":"PublicReadGetObject",
        "Effect":"Allow",
	  "Principal": "*",
      "Action":["s3:GetObject"],
      "Resource":["arn:aws:s3:::example-bucket/*"
      ]
    }
  ]
}
#+END_EXAMPLE

You can grant public read permission to your objects by using either a bucket
policy or an object ACL.  To make an object publicly readable using an ACL,
grant =READ= permission to the =AllUsers= group, as shown in the following
grant element.  Add this grant element to the object ACL.[fn:6]

#+BEGIN_EXAMPLE
<Grant>
  <Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:type="Group">
    <URI>http://acs.amazonaws.com/groups/global/AllUsers</URI>
  </Grantee>
  <Permission>READ</Permission>
</Grant>
#+END_EXAMPLE

*** Optional Bucket Configurations

**** Configuring Web Traffic Logging
If you want to track the number of visitors who access your website, enable
logging for the root domain bucket. Enabling logging is optional.

1. Open the [[https://console.aws.amazon.com/s3/][Amazon S3 console]]
2. Create a bucket for logging named =logs.example.com= in the same AWS Region
   that the =example.com= and =www.example.com= buckets were created in.
3. Create two folders in the =logs.example.com bucket=; one named ~root~, and
   the other named ~cdn~.  If you configure Amazon CloudFront to speed up your
   website, you will use the ~cdn~ folder.
4. In the =Bucket name= list, choose your root domain bucket, choose
   =Properties=, and then choose =Server access logging=.
5. Choose =Enable logging=.
6. For =Target bucket=, choose the bucket that you created for the log files,
   =logs.example.com=.
7. For =Target prefix=, type ~root/~.  This setting groups the log data files in the
   bucket in a folder named root so that they are easy to locate.
8. Choose =Save=.

**** Custom Error Document Support
The following table lists the subset of HTTP response codes that Amazon S3
returns when an error occurs.

| HTTP Error Code         | Description                    |
|                         | <30>                           |
|-------------------------+--------------------------------|
| 301 Moved Permanently   | When a user sends a request directly to the Amazon S3 website endpoints |
| 302 Found               | When Amazon S3 receives a request for a key x |
| 304 Not Modified        | Amazon S3 users request headers |
| 400 Malformed Request   | The website endpoint responds with a 400 Malformed Request when a user attempts to access a bucket through the incorrect regional endpoint. |
| 403 Forbidden           | The website endpoint responds with a 403 Forbidden when a user request translates to an object that is not publicly readable. The object owner must make the object publicly readable using a bucket policy or an ACL. |
| 404 Not Found           | The website endpoint responds with 404 Not Found for the following reasons: |
| 500 Service Error       | The website endpoint responds with a 500 Service Error when an internal server error occurs. |
| 503 Service Unavailable | The website endpoint responds with a 503 Service Unavailable when Amazon S3 determines that you need to reduce your request rate. |
|-------------------------+--------------------------------|

For each of these errors, Amazon S3 returns a predefined HTML message.

You can optionally provide a custom error document that contains a
user-friendly error message and additional help. You provide this custom error
document as part of adding website configuration to your bucket. Amazon S3
returns your custom error document for only the HTTP 4XX class of error codes.

When an error occurs, Amazon S3 returns an HTML error document. If you
configured your website with a custom error document, Amazon S3 returns that
error document. However, some browsers display their own error message when an
error occurs, ignoring the error document that Amazon S3 returns. For example,
when an HTTP 404 Not Found error occurs, Google Chrome might ignore the error
document that Amazon S3 returns and display its own error.

**** Configuring a Webpage Redirect
If your Amazon S3 bucket is configured for website hosting, you can redirect
requests for an object to another object in the same bucket or to an external
URL.

*** Setting Up a Static Website Using a Custom Domain
Configure a bucket for website hosting, upload a sample index document, and
test the website using the Amazon S3 website endpoint for the bucket.  You can
use your own domain, such as =example.com=, instead of the S3 bucket website
endpoint, and serve content from an Amazon S3 bucket configured as a website.

**** Create and Configure Buckets and Upload Data
To support requests from both the root domain such as =example.com= and
subdomain such as =www.example.com=, you create two buckets.  One bucket
contains the content.  You configure the other bucket to redirect requests.

*Services Used*

- Amazon Route 53 ::

     You use Route 53 to register domains and to define where you want to route
     internet traffic for your domain. We explain how to create Route 53 alias
     records that route traffic for your domain (example.com) and subdomain
     (www.example.com) to an Amazon S3 bucket that contains an HTML file.

     If you don't already have a registered domain name, such as =example.com=,
     [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register.html][register one with Route 53]].  When you have a registered domain name, your
     next tasks are to create and configure Amazon S3 buckets for website
     hosting and to upload your website content.

- Amazon S3 ::

               You use Amazon S3 to create buckets, upload a sample website
               page, configure permissions so that everyone can see the
               content, and then configure the buckets for website hosting.

               To support requests from both the root domain such as
               =example.com= and subdomain such as =www.example.com=, you
               create two buckets.  One bucket contains the content. You
               configure the other bucket to redirect requests.

***** Create Two Buckets

Your website will support requests from both =example.com= and
=www.example.com=.  You will host your content out of the root domain bucket
(=example.com=), and you will redirect requests for =www.example.com= to the
root domain bucket.  You can store content in either bucket.  For this example,
you host content in the example.com bucket.  The content can be text files,
family photos, videosâ€”--whatever you want.

1. Sign in to the Amazon S3 console with your AWS account credentials

2. [[https://console.aws.amazon.com/s3/][open the Amazon S3 console]].

3. create the following two buckets that match your domain name and
  subdomain:[fn:7]
  + =example.com=
  + =www.example.com=

  The bucket names must match the names of the website that you are hosting.
  Like domains, subdomains must have their own S3 buckets, and the buckets must
  share the exact names as the subdomains.

- Upload your website data to the =example.com= bucket.[fn:8]

***** Configure Buckets for Website Hosting
When you configure a bucket for website hosting, you can access the website
using the Amazon S3 assigned bucket website endpoint.  In this step, you
configure both buckets for website hosting. First, you configure =example.com=
as a website and then you configure =www.example.com= to redirect all requests
to the =example.com bucket=.

1. Sign in to the AWS Management Console and open the [[https://console.aws.amazon.com/s3/][Amazon S3 console]]
2. In the =Bucket name= list, choose the name of the bucket that you want to
   enable static website hosting for.
3. Choose =Properties=.
4. Choose =Static website hosting=.
5. Configure the =example.com= bucket for website hosting.  In the =Index
   Document= box, type the name that you gave your index page.
6. Choose =Save=.

***** Configure Your Website Redirect
Now that you have configured your bucket for website hosting, configure the
=www.example.com= bucket to redirect all requests for =www.example.com= to
=example.com=.

1. In the Amazon S3 console, in the =Buckets= list, choose your bucket
   (=www.example.com=, in this example).
2. Choose =Properties=.
3. Choose =Static website hosting=.
4. Choose =Redirect requests=.  In the =Target bucket or domain= box, type
   =example.com=.
5. Choose =Save=.

***** Configure Logging for Website Traffic
Optionally, you can configure logging to track the number of visitors accessing
your website.  To do that, you enable logging for the root domain bucket.
- see [[https://docs.aws.amazon.com/AmazonS3/latest/dev/LoggingWebsiteTraffic.html][(Optional) Configuring Web Traffic Logging]].

***** Test Your Endpoint and Redirect
To test the website, type the URL of the endpoint in your browser.  Your
request is redirected, and the browser displays the index document for
=example.com=.

**** Add Alias Records for example.com and www.example.com
In this step, you create the alias records that you add to the hosted zone for
your domain maps =example.com= and =www.example.com= to the corresponding S3
buckets.  Instead of using IP addresses, the alias records use the Amazon S3
website endpoints.  Amazon Route 53 maintains a mapping between the alias
records and the IP addresses where the Amazon S3 buckets reside.

1. Open the [[https://console.aws.amazon.com/route53/][Route 53 console]]
2. In the list of hosted zones, choose the name of your domain.
3. Choose =Create Record Set=.[fn:9]
4. Specify the following values:
   - Name ::

             For the first record that you'll create, accept the default value,
             which is the name of your hosted zone and your domain.  This will
             route internet traffic to the bucket that has the same name as
             your domain.

             Repeat this step to create a second record for your subdomain.
             For the second record, type =www=.  This will route internet
             traffic to the =www.example.com= bucket.

   - Type :: Choose =A â€“ IPv4 address=.

   - Alias :: =Yes=

   - Alias Target ::

                     Type the name of your Amazon S3 bucket endpoint, for
                     example =example.com= (s3-website-us-west-2).  You specify
                     the same value for =Alias Target= for both records.  Route
                     53 figures out which bucket to route traffic to based on
                     the name of the record.

   - Routing Policy :: Accept the default value of =Simple=.

   - Evaluate Target Health :: Accept the default value of =No=.

5. Choose =Create=.

6. For =www.example.com=, repeat steps 4 through 6 to create a record.

**** Testing
To verify that the website is working correctly, in your browser, try the
following URLs:

- =http://example.com= :: Displays the index document in the =example.com= bucket.
- =http://www.example.com= :: Redirects your request to =example.com=.

* Domain Names

** DNS Domain Name Format
Domain names (including the names of domains, hosted zones, and records)
consist of a series of labels separated by dots.  Each label can be up to 63
bytes long.  The total length of a domain name cannot exceed 255 bytes,
including the dots.  Amazon Route 53 supports any valid domain name.

Naming requirements depend on whether you're registering a domain name or
you're specifying the name of a hosted zone or a record.

*** Formatting Domain Names for Domain Name Registration
For domain name registration, a domain name can contain only the characters
=a-z=, =0-9=, and =â€“= (hyphen).  You can't specify a hyphen at the beginning or
end of a label.

** Working with Records
After you create a hosted zone for your domain, such as =example.com=, you
create *records* to tell the Domain Name System (DNS) how you want traffic to
be /routed/ for that domain.

For example, you might create records that cause DNS to do the following:
- /Route/ internet traffic for =example.com= to the IP address of a host in
  your data center.
- /Route/ email for that domain (=ichiro@example.com=) to a mail server
  (=mail.example.com=).
- /Route/ traffic for a *subdomain* called =operations.tokyo.example=.com to
  the IP address of a different host.


Each *record* includes the name of a
- /domain/ or a /subdomain/,
- a /record type/ (for example, a record with a type of =MX= routes email), and
- other information applicable to the record type (for =MX= records, the host
  name of one or more mail servers and a priority for each server).


The name of each record in a hosted zone must end with the name of the hosted
zone.

#+BEGIN_QUOTE
For example, the =example.com= hosted zone can contain records for
=www.example.com= and =accounting.tokyo.example.com= subdomains, but cannot
contain records for a =www.example.ca= subdomain.
#+END_QUOTE

Amazon Route 53 doesn't charge for the records that you add to a hosted zone.

*** Choosing a Routing Policy
When you create a record, you choose a *routing policy*, which determines how
Amazon Route 53 responds to queries:
- Simple routing policy :: Use for a single resource that performs a given
     function for your domain, for example, a web server that serves content
     for the example.com website.

     Simple routing lets you configure standard DNS records, with no special
     Route 53 routing such as weighted or latency.  With simple routing, you
     typically route traffic to a single resource, for example, to a web server
     for your website.

     If you choose the simple routing policy in the Route 53 console, you can't
     create multiple records that have the same name and type, but you can
     specify multiple values in the same record, such as multiple IP addresses.
     If you choose the simple routing policy for an *alias record*, you can
     specify only one AWS resource or one record in the current hosted zone.

  - Values for Basic/Alias Records :: When you create basic/alias records, you
       specify the following values.  See [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-choosing-alias-non-alias.html][Choosing Between Alias and Non-Alias
       Records]] (or [[*Choosing Between Alias and Non-Alias Records][below]]).

    - Name :: Enter the name of the domain or subdomain that you want to route
              traffic for.  The default value is the name of the hosted zone.
              If you're creating a record that has the same name as the hosted
              zone, don't enter a value.  If you're creating a record that has
              a value of *CNAME* for Type, the name of the record can't be the
              same as the name of the hosted zone.  You can use an asterisk
              (=*=) character in the name. DNS treats the =*= character either
              as a wildcard or as the =*= character (ASCII 42), depending on
              where it appears in the name.

      - Aliases to CloudFront distributions and Amazon S3 buckets ::
           The value that you specify depends in part on the AWS resource that
           you're routing traffic to:
        - CloudFront distribution ::
             Your distribution must include an /alternate domain name/ that
             matches the name of the record.  For example, if the name of the
             record is =acme.example.com=, your CloudFront distribution must
             include =acme.example.com= as one of the alternate domain names.

             For more information, see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html][Using Alternate Domain Names (CNAMEs)]] in
             the /Amazon CloudFront Developer Guide/.

        - Amazon S3 buckete ::
             The name of the record must match the name of your Amazon S3
             bucket.  For example, if the name of your bucket is
             =acme.example.com=, the name of this record must also be
             =acme.example.com=.

             In addition, you must configure the bucket for website hosting.
             For more information, see [[https://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html][Configure a Bucket for Website Hosting]]
             in the /Amazon Simple Storage Service Developer Guide/.

    - Type :: The DNS record type. For more information, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html][Supported DNS
              Record Types]].  Select the value for Type based on how you want
              Route 53 to respond to DNS queries.

              For an Alias, select the applicable value based on the AWS
              resource that you're routing traffic to:

      - API Gateway custom regional API or edge-optimized API :: Select
           =A â€” IPv4= address.

      - Amazon VPC interface endpoints :: Select =A â€” IPv4= address.

      - CloudFront distribution :: Select =A â€” IPv4= address.

           If IPv6 is enabled for the distribution, create two records, one
           with a value of =A â€” IPv4= address for =Type=, and one with a value
           of =AAAA â€” IPv6= address.

      - Elastic Beanstalk environment that has regionalized subdomains :: Select
           =A â€” IPv4= address

      - ELB load balancer :: Select =A â€” IPv4= address or =AAAA â€” IPv6= address

      - Amazon S3 bucket :: Select =A â€” IPv4= address

      - Another record in this hosted zone :: Select the type of the record
           that you're creating the alias for.  All types are supported except
           =NS= and =SOA=.

           *Note:*. If you're creating an alias record that has the same name
           as the hosted zone (known as the *zone apex*), you can't route
           traffic to a record for which the value of =Type= is =CNAME=.  This
           is because the alias record must have the same type as the record
           you're routing traffic to, and creating a =CNAME= record for the
           zone apex isn't supported even for an alias record.

    - Alias :: Select =No= or =Yes= as appropriate.

    - Alias Target :: The value that you specify depends on the AWS resource
                      that you're routing traffic to.

      - API Gateway custom regional APIs and edge-optimized APIs :: (see
           documentation)
      - CloudFront Distributions :: (see documentation)
      - Elastic Beanstalk environments that have regionalized subdomains :: (see
           documentation)
      - ELB Load Balancers :: (see documentation)
      - Amazon S3 Buckets :: For Amazon S3 buckets that are configured as
           website endpoints, do one of the following:
        - *If you used the same account to create your Route 53 hosted zone and
          your Amazon S3 bucket*---Choose Alias Target and choose a bucket from
          the list. If you have a lot of buckets, you can enter the first few
          characters of the DNS name to filter the list.  The value of Alias
          Target changes to the Amazon S3 website endpoint for your bucket.
        - *If you used different accounts to create your Route 53 hosted zone
          and your Amazon S3 bucket*---Enter the name of the region that you
          created your S3 bucket in. Use the value that appears in the Website
          Endpoint column in the [[https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints][Amazon Simple Storage Service Website
          Endpoints]] table in the [[https://docs.aws.amazon.com/general/latest/gr/rande.html][AWS Regions and Endpoints]] chapter of the
          Amazon Web Services General Reference.  If you used AWS accounts
          other than the current account to create your Amazon S3 buckets, the
          bucket won't appear in the Alias Targets list.

        You must configure the bucket for website hosting. For more
           information, see [[https://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html][Configure a Bucket for Website Hosting]] in the
           /Amazon Simple Storage Service Developer Guide/.

        The name of the record must match the name of your Amazon S3 bucket.
           For example, if the name of your Amazon S3 bucket is
           =acme.example.com=, the name of this record must also be
           =acme.example.com=
      - Amazon VPC interface endpoints :: (see documentation)
      - Records in this Hosted Zone :: (see documentation)

    - Alias Hosted Zone ID :: This value appears automatically based on the
         value that you selected or entered for =Alias Target=.

    - Routing Policy (Alias) :: Select =Simple=.

    - Evaluate Target Health (Alias) :: When the value of =Routing Policy= is
         =Simple=, choose =No=.  If you have only one record that has a given
         name and type, Route 53 responds to DNS queries using the values in
         that record regardless of whether the resource is healthy.

    - TTL (Time to Live) :: The amount of time, in seconds, that you want DNS
         recursive resolvers to cache information about this record. If you
         specify a longer value (for example, 172800 seconds, or two days), you
         pay less for Route 53 service because recursive resolvers send
         requests to Route 53 less often. However, it takes longer for changes
         to the record (for example, a new IP address) to take effect because
         recursive resolvers use the values in their cache for longer periods
         instead of asking Route 53 for the latest information.

    - Value :: Enter a value that is appropriate for the value of =Type=.  For
               all types except =CNAME=, you can enter more than one
               value.  Enter each value on a separate line.

      - A---IPv4 address :: An IP address in IPv4 format, for example,
           =192.0.2.235=.

      - AAAA---IPv6 address :: An IP address in IPv6 format, for example,
           =2001:0db8:85a3:0:0:8a2e:0370:7334=.

      - CAA---Certificate Authority Authorization :: Three space-separated
           values that control which certificate authorities are allowed to
           issue certificates or wildcard certificates for the domain or
           subdomain that is specified by Name.

      - CNAME---Canonical name :: The fully qualified domain name (for example,
           =www.example.com=) that you want Route 53 to return in response to
           DNS queries for this record.  A trailing dot is optional; Route 53
           assumes that the domain name is /fully qualified/.  This means that
           Route 53 treats =www.example.com= (without a trailing dot) and
           =www.example.com.= (with a trailing dot) as identical.

      - MX---Mail exchange :: A priority and a domain name that specifies a
           mail server, for example, =10 mailserver.example.com=.

      - NAPTR---Name Authority Pointer :: Six space-separated settings that are
           used by Dynamic Delegation Discovery System (DDDS) applications to
           convert one value to another or to replace one value with
           another.  For more information, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#NAPTRFormat][NAPTR Record Type]].

      - NS---Name server :: The domain name of a name server, for example,
           =ns1.example.com=.

      - PTR---Pointer :: The domain name that you want Route 53 to return.

      - SOA---Start of Authority :: Basic DNS information about the domain.  For
           more information, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/SOA-NSrecords.html#SOArecords][The Start of Authority (SOA) Record]].

      - SPF---Sender Policy Framework :: An SPF record enclosed in quotation
           marks, for example, ="v=spf1 ip4:192.168.0.1/16-all"=.  SPF records are
           not recommended.  For more information, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html][Supported DNS Record
           Types]].

      - SRV---Service locator :: An SRV record.  For information about SRV
           record format, refer to the applicable documentation.

      - TXT---Text :: A text record.  Enclose text in quotation marks, forn
                      example, ="Sample Text Entry"=.

    - Routing policy :: Select =Simple=.

- Failover routing policy :: Use when you want to configure active-passive
     failover.
- Geolocation routing policy :: Use when you want to route traffic based on the
     location of your users.
- Geoproximity routing policy :: Use when you want to route traffic based on
     the location of your resources and, optionally, shift traffic from
     resources in one location to resources in another.
- Latency routing policy :: Use when you have resources in multiple AWS Regions
     and you want to route traffic to the region that provides the best
     latency.
- Multivalue answer routing policy :: Use when you want Route 53 to respond to
     DNS queries with up to eight healthy records selected at random.
- Weighted routing policy :: Use to route traffic to multiple resources in
     proportions that you specify.

*** Choosing Between Alias and Non-Alias Records
Amazon Route 53 alias records provide a Route 53â€“specific extension to DNS
functionality.  *Alias records* let you route traffic to selected AWS
resources, such as CloudFront distributions and Amazon S3 buckets.  They also
let you route traffic from one record in a hosted zone to another record.

Unlike a =CNAME= record, you can create an alias record at the top node of a
DNS namespace, also known as the /zone apex/.  For example, if you register the
DNS name =example.com=, the /zone apex/ is =example.com=.  You can't create a
=CNAME= record for =example.com=, but you can create an alias record for
=example.com= that routes traffic to =www.example.com=.

When Route 53 receives a DNS query for an alias record, Route 53 responds with
the applicable value for that resource:
- An Amazon API Gateway custom regional API or edge-optimized API
- An Amazon VPC interface endpoint---Route 53 responds with one or more IP
  addresses for your interface endpoint.
- A CloudFront distribution
- An Elastic Beanstalk environment
- An ELB load balancer
- An Amazon S3 bucket that is configured as a static website---Route 53
  responds with one IP address for the Amazon S3 bucket.
- Another Route 53 record in the same hosted zone


Alias records are similar to CNAME records, but there are some important
differences:

- A CNAME record can redirect DNS queries to any DNS record. For example, you
  can create a CNAME record that redirects queries from acme.example.com to
  zenith.example.com or to acme.example.org. You don't need to use Route 53 as
  the DNS service for the domain that you're redirecting queries to.

- An alias record can only redirect queries to selected AWS resources, such as
  the following:
  - Amazon S3 buckets
  - CloudFront distributions
  - Another record in the Route 53 hosted zone that you're creating the alias
    record in

  #+BEGIN_QUOTE
  For example, you can create an alias record named =acme.example.com= that
  redirects queries to an Amazon S3 bucket that is also named
  =acme.example.com=.  You can also create an =acme.example.com= alias record
  that redirects queries to a record named =zenith.example.com= in the
  =example.com= hosted zone.
  #+END_QUOTE

- You can't create a =CNAME= record that has the same name as the hosted zone
  (the /zone apex/).  This is true both for hosted zones for domain names
  (=example.com=) and for hosted zones for subdomains (=zenith.example.com=).

- In most configurations, you can create an alias record that has the same name
  as the hosted zone (the /zone apex/).  The one exception is when you want to
  redirect queries from the zone apex (such as =example.com=) to a record in
  the same hosted zone that has a type of =CNAME= (such as
  =zenith.example.com=).  The alias record must have the same type as the
  record you're routing traffic to, and creating a =CNAME= record for the zone
  apex isn't supported even for an alias record.

- Route 53 charges for CNAME queries.

- Route 53 doesn't charge for alias queries to AWS resources.  For more
  information, see [[https://aws.amazon.com/route53/pricing/][Amazon Route 53 Pricing]].

- A CNAME record redirects DNS queries for a record name regardless of record
  type, such as =A= or =AAAA=.

- Route 53 responds to a DNS query only when the name of the alias record (such
  as =acme.example.com=) and the type of the alias record (such as =A= or
  =AAAA=) match the name and type in the DNS query.

- A =CNAME= record appears as a =CNAME= record in response to =dig= or
  =nslookup= queries.

- An alias record appears as the record type that you specified when you
  created the record, such as =A= or =AAAA=.  The =alias= property is visible
  only in the Route 53 console or in the response to a programmatic request,
  such as an AWS CLI ~list-resource-record-sets~ command.

** Register a Domain Name and Connect to an EC2 Instance
- [[https://aws.amazon.com/getting-started/tutorials/get-a-domain/?trk=gs_card][Register a Domain Name]]

Register a new domain name for your website and connect that domain name
through the Domain Name System (DNS) to a running EC2 instance (such as a
WebApp, or website running WordPress, Apache, NGINX, IIS, or other Website
platform).[fn:1]

There's an annual fee to *register a domain*, ranging from $9 to several
hundred dollars, depending on the top-level domain, such as =.com=.  For more
information, see Amazon Route 53 Pricing for Domain Registration.

*** Step 1---Obtain a Static URL

*NOTE:* If you are using *Elastic Load Balancing* (Elastic Load Balancing is
done automatically if you launched your app with Amazon Elastic Beanstalk) then
you do not need to obtain a static IP address and can go directly to step 2.

 - [[https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1#Addresses:sort=publicIp][Open]] the Elastic IPs part of the /EC2 console/ in a new window and click
   =Allocate New Address=.

 - Set /EIP used in:/ to =VPC= and click =Yes, Allocate=.  Note your new IP
   address and click Close.
    : New address request succeeded
    : Elastic IP 3.211.150.216

   *NOTE:* There is no charge for Elastic IP addresses (EIPs) that are
   connected to running instances. If you remove the instance (e.g. the EIP is
   no longer connected to a running instance) then there is a cost of $0.005/hr
   for the EIP).

 - =Select the new IP address= in the /Elastic IP/ column.  Press the =Actions=
   button and choose the =Associate Address= option.

 - Click in the =Instance= text box and =choose the option that has your
   instance name=.

 - Verify that your new Elastic IP address is working by typing it into your
   web browser.

*** Step 2---Register a Domain Name

You now have an IP address associated with your instance.  You now need to
configure the Domain Name System (DNS) to point to this address.

*NOTE:* In this example we will be acquiring a new domain name and associating
it with the Elastic IP address we just created (which is attached to your
instance). If you already have a domain name, or if you choose to use another
domain registrar to get a domain name, please refer to their documentation on
configuring DNS for your instance.

- [[https://console.aws.amazon.com/route53/home?region=us-east-1][Open]] the Route 53 console in a new window (Route 53 is AWSâ€™s DNS
  service).  You can register new domain names with Route 53 as well as manage
  DNS records for your domain.

- Click the =Register Domain= button.  On the next screen, enter the domain you
  want in the =Choose a Domain= box (cloudexamples is shown in the image, then
  select a =Top Level Domain= (TLD) (e.g. =.com=, =.org=, =.co.uk=, etc.)  And
  click the =Check= button to see if the domain is available. n If the domain
  is available, click the =Add to cart= button and scroll to the bottom of the
  page to click =Continue=.

- Enter your =Contact Details=.  These are the details that will be associated
  with your domain name.  When you are done, click =Continue= at the bottom of
  the page.

- Review the details as they are listed and, if they are correct, check the box
  titled /I have read and agree to the AWS Domain Name Registration
  Agreement/. Then click the =Complete Purchase= button.

- If you registered a domain that has a /generic top-level domain/ (such as
  =.com=), you'll receive an email that asks you to confirm your email address.
  (We don't send an email if we already have confirmation that the email
  address is valid.).  *You must follow the link in this email to confirm your
  email address, or the domain won't be registered.*.  For all domains, you'll
  receive an email when your domain registration has been approved.

*** Step 3---Configure DNS

The last step is to configure the DNS so that the new domain we created in step
2 can point to the address we have for our server.  This can be the static IP
address (from step 1) or a fully qualified domain name (FQDN) that is
automatically created if you are using Amazon Elastic Beanstalk.

Note that when you register a domain, we automatically create a *hosted zone*
that has the same name as the domain.[fn:2]

- Open the [[https://console.aws.amazon.com/route53/home?region=us-east-1#hosted-zones:][Hosted Zones]] part of the Route 53 console.  Click on the domain name
  you created in step 2.

- Click the =Create Record Set= button.  On the right side of the window, enter
  =www= in the /Name/ text box.  Enter the Elastic IP address you created in
  step 1 in the /Value/ box and then click =Create=.

- Verify that you have a new entry in the main table with the value you
  entered.

- Verify that your website is now available at your new domain by typing your
  new website address into your web browser.

* Export Settings                                                  :noexport:
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:t tex:t num:3 H:6 ':t
#+HTML_DOCTYPE: html5
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+LATEX_HEADER:

* Footnotes

[fn:3] There's an annual fee to register a domain, ranging from $9 to several
hundred dollars, depending on the top-level domain, such as =.com=.

[fn:4] Each record contains information about how you want to route traffic for
one domain (such as =example.com=) or subdomain (such as =www.example.com= or
=test.example.com=).  Records are stored in the hosted zone for your domain.

[fn:5] For more information about bucket policies, see
[[https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html][Using Bucket Policies and User Policies]]

[fn:6] For information about managing ACLs, see [[https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html][Managing Access with ACLs]].

[fn:7] see [[https://docs.aws.amazon.com/AmazonS3/latest/user-guide/create-bucket.html][How Do I Create an S3 Bucket?]]

[fn:8] For step-by-step instructions, see [[https://docs.aws.amazon.com/AmazonS3/latest/user-guide/upload-objects.html][How Do I Upload an Object to an S3
Bucket?]] in the Amazon Simple Storage Service Console User Guide.

[fn:9] Each record contains information about how you want to route traffic for
one domain (example.com) or subdomain (www.example.com). Records are stored in
the hosted zone for your domain.

[fn:1] If you already have a domain name registered, do step 1 and then refer
to your domain registrarâ€™s documentation for how to set the DNS record for your
new site.

[fn:2] A hosted zone is a container for records, and records contain
information about how you want to route traffic for a specific domain, such as
example.com, and its subdomains (acme.example.com, zenith.example.com). A
hosted zone and the corresponding domain have the same name.

