# -*- mode:org; fill-column:79; -*-
#+title:Amazon Lightsail: Deploying and Scaling Your First Cloud Application
#+date:<2019-04-24 Wed 18:00>
#+author:AWS Training
* About the Course
Amazon Lightsail is a cloud platform that's cost-effective, fast, and reliable
with an easy-to-use interface.  It’s ideal for simpler workloads, quick
deployments, and getting started on AWS.

http://aws.amazon.com/training/

In this module, you will gain an understanding of

- the benefits of Amazon Lightsail;

- best practices for deploying your application onto Lightsail preconfigured
  blueprints;

- how to use snapshots and load balancers to scale applications; and

- learn migration techniques when moving from Amazon Lightsail to other AWS
  services.

** Course Syllabus
{{{heading(What is Amazon Lightsail)}}}
- Amazon Lightsail
- When to Choose Amazon Lightsail
- Amazon Lightsail Console Overview


{{{heading(Deploy And Scale A Lamp Application)}}}
- Prerequisites and SSH
- Task 1---Deploy the lab infrastructure
- Task 2---Deploy a monolithic LAMP application
- Task 3---Connect to an Amazon Lightsail database
- Task 4---Scaling the PHP frontend
- Task 5---Migrating to Amazon Relational Database Service
- Task 6---Upgrading to Amazon Elastic Compute Cloud
- Conclusion

** Lab Overview
#+CINDEX:scalable applications, deploy
#+CINDEX:LAMP stack
This lab demonstrates how to use Lightsail to easily deploy scalable
applications in the cloud.  You will use the LAMP stack (Linux, Apache, MySql,
PHP) as a demonstration, although Lightsail supports many other application
stacks.

This lab is intended to be used in conjunction with the [[https://www.aws.training/learningobject/wbc?id=30854][course]] {{{cite(Amazon
Lightsail: Deploying and scaling your first cloud application)}}}.  For the
best experience, at the end of each task, we recommend that you toggle between
the lab and the course.

** Topics Covered
By the end of this lab, you will be able to:

- Create the *infrastructure* you will use in the subsequent tasks

- Deploy a *two-tier LAMP stack application* as a /monolith/ in a single
  Lightsail instance

- Re-architect the application by *separating the front end from the database*

- *Scale and load balance* the web front end

- Move your application to *other AWS services* by:
  + Creating and using an *Amazon Relational Database Service (Amazon RDS)
    database*
  + Moving your front end to *Amazon Elastic Compute Cloud (Amazon EC2)*

* What is Amazon Lightsail
** Lesson 1---What is Amazon Lightsail
{{{heading(Cloud Made Easy)}}}

From hosting your website or web application to running software and
development environments, Lightsail can do it all.

{{{subheading(Scales to your Needs)}}}

Amazon Lightsail is a great way to get started with AWS for developers, small
businesses, students, and other users who need a cloud platform solution.

{{{subheading(Cloud-based Services)}}}

Developers can use the compute, storage, and networking features of Lightsail
to deploy and manage websites or web applications in the cloud.

{{{subheading(Everything you need)}}}

Lightsail includes everything you need to launch your project quickly:
- virtual machines,
- solid state drive (SSD)-based storage,
- load balancers, and
- managed databases.


{{{heading(What can I do with Lightsail?)}}}

Common use cases for Lightsail include:
- running websites,
- web applications,
- blogs,
- e-commerce sites,
- simple software,
- and more.

** Lesson 2---When to Choose Lightsail
Amazon Lightsail is ideal for simpler workloads, quick deployments, and getting
started on AWS.
- Small-scale, multi-tier applications
- Websites
- Web applications
- Testing environment
- Line-of-business software


{{{heading(Amazon Elastic Compute Cloud (Amazon EC2))}}}

Amazon EC2 is designed for scalable deployments and optimizing your workloads.

- Large, multi-tier applications (several dozens of instances)
- Anything requiring instances that are workload-optimized, highly
  configurable, or resource-intensive; e.g.
  - big data analytics,
  - high performance computing,
  - scientific computing
- Advanced networking

** Lesson 3---Amazon Lightsail console overview
Curious what Lightsail looks like on the inside?  In this video, Mike Coleman
will demonstrate an overview of the Amazon Lightsail console.

[[file:videos/lightsail_console.mp4]]

* Deploy and Scale a Lamp Application
** Prerequisites and SSH Instructions
{{{heading(Lesson 4. What are we going to do?)}}}

#+CINDEX:prerequisites
To successfully complete this Amazon Lightsail lab, you should be familiar with
basic navigation of the AWS Management Console and be comfortable editing
scripts using a text editor.  You do not need a deep knowledge of PHP, SQL, or
the LAMP stack, since we will provide you with the application code; but it is
useful to have a general idea.

{{{heading(Secure Shell (SSH))}}}

#+CINDEX:Secure Shell (SSH)
#+CINDEX:SSH
SSH provides a secure channel over an unsecured network in a client–server
architecture.  For users unfamiliar with SSH, the video below will walk you
through the process of setting up SSH for your web application.

This demonstration video will take you step by step through the prerequisites
process for this lab.

[[file:./videos/ssh_into_lightsail.mp4]]

*** SSH Into a Lightsail Instance Using the Built-in Web-based Client
#+CINDEX:web-based client
#+CINDEX:client, web-based
1. Open the web-based console: Click on the SSH icon on the instance icon

2. Paste into console using the =Paste= icon and Right-click

*** SSH Into a Lightsail Instance Using a Preferred Client
1. Copy IP address from the instance icon

2. Click on the instance name and scroll to =Connect using SSH=

3. Instance name will be ``bitnami''

4. Obtain the SSH key
   - Account
   - Account (under Account)
   - SSH keys
   - Download =Default key=
   - Set permissions to =600=
     : chmod 600 LightsailDefaultKey-us-west-2.pem

5. SSH into the instance using the instance's IP address and the key
     : ssh -i LightsailDefaultKey-us-west-2.pem bitnami@<IP-address>

*** Take a Test Run
This [[https://run.qwiklabs.com/catalog_lab/1602][link]] will take to you to a Lightsail environment where you can build the
application yourself.  For the best experience, at the end of each task, we
recommend that you toggle between the course and the lab.

** Start the Lab
SPL-220 Version 1.0.0

1. At the top of your screen, launch your lab by clicking =Start Lab=.

   If you are prompted for a token, use the one distributed to you (or credits
   you have purchased).

   A status bar shows the progress of the lab environment creation process. The
   AWS Management Console is accessible during lab resource creation, but your
   AWS resources may not be fully available until the process is complete.

2. Open your lab by clicking =Open Console=.  This will automatically log you
   into the AWS Management Console.  *Please do not change the Region unless
   instructed*.


{{{heading(Common login errors)}}}

{{{subheading(Error : Federated login credentials)}}}

If you see this message:
- Close the browser tab to return to your initial lab window
- Wait a few seconds
- Click =Open Console= again
- You should now be able to access the AWS Management Console.

{{{subheading(Error: You must first log out)}}}

If you see the message, *You must first log out before logging into a different
AWS account:*
- Click =Click here=
- Close your browser tab to return to your initial Qwiklabs window
- Click =Open console= again

** Task 1---Deploy the Lab Infrastructure
{{{heading(Lesson 5. What are You Going to Do?)}}}

{{{subheading(Build and Deploy Infrastructure Components)}}}

#+CINDEX:infrastructure components, deploy
In this task, you'll deploy the infrastructure components that will be used in
subsequent sections.

1. Build the *LAMP instance*: A Lightsail instance based on the LAMP blueprint
2. Deploy a *Amazon Lightsail database*
3. Create a *Lightsail load balancer*
4. Build an *Amazon Relational Database Service (Amazon RDS) instance*


This demonstration video will take you step by step through the lab process.

[[file:./videos/task_1-deploy_infrastructure.mp4]]

*** Build the Lamp Instance
#+CINDEX:LAMP stack instance, create
The first step in deploying the sample application is creating a LAMP stack
instance in Lightsail.

3. [@3]In the *AWS Management Console*, on the =Services= menu, click
   =Lightsail= to navigate to the Lightsail homepage.

4. Choose =English= for language support.

5. Click =Let's get started=

6. Click =Create instance=

7. Under =Instance Location=, make sure the region is the same as the region
   that your lab was launched in.  Be sure to create all resources in the same
   region.

8. Under /Select a platform/, ensure *Linux / Unix* is selected.

9. Scroll down to =Select a blueprint= and select the =LAMP (PHP 5)= blueprint

10. Scroll to =Identify your instance=; then
    - name your instance ~PHP-fe-1~
    - Click =Create instance=

11. Wait for the instance to show a state of /Running/.

*** Connect to Your Lightsail Instance Using SSH

#+CINDEX:SSH, connect to instance using
There are two ways to access a Lightsail Linux instance:
- use the browser-based SSH client;
- use your own preferred SSH client


12. [@12]Connect to your Lightsail instance using either method; if you use
    your own preferred SSH client:
    - you will need to download your SSH keys from Lightsail;
    - you will need to know the user name and IP address for each instance;

13. In the *AWS Management Console*, on the =Services= menu, click =Lightsail=

**** Download Your SSH Key

#+CINDEX:SSH key, download
14. [@14]At the top right of the screen, click =Account=, then =Account= again.

15. On the horizontal menu, select =SSH Keys=; there will be a list of
    available keys.  Lightsail will create a default key for any Region in
    which you have previously deployed an instance.

16. Next to the Region your lab was launched in (``MyRegion''), click
    =Download=.

17. The key file will have the extension ~.pem~ and will be named
    ~LightsailDefaultPrivateKey-Region.pem~ where Region is the Region from
    which you downloaded the key.  Note that while default keys might share the
    same name, they are unique for each Lightsail account.

**** Obtain Your Instance IP Address

#+CINDEX:IP address, instance
18. [@18]At the top of the screen, click =Home=.  Your instance IP address is
    located on your ~PHP-fe-1~ card.

19. Copy the IP address and create an environment variable:
    : IP=$(pbpaste)

20. Change the key's file mode:
    : chmod 600 ./ssh/LightsailDefaultPrivateKey-us-west-2.pem

    Issue the SSH command to access the instance using the user name ~bitnami~
    and the copied IP address:
    : ssh -i ./ssh/LightsailDefaultPrivateKey-us-west-2.pem bitnami@$IP

*** Deploy an Amazon Lightsail Database

#+CINDEX:Lightsail database, deploy
In this section, you will deploy a Lightsail database.  Lightsail databases are
a managed database service that allow you to get away from the complexity of
deploying and managing database software.  Lightsail manages the underlying
infrastructure and database engine, and you only need to worry about creating
and deploying the actual databases and tables that run inside the service.

22. [@22]From the horizontal menu on the Lightsail console, click =Databases=.

23. Click on =Create a database=.

24. Leave the default value for the MySQL version.

25. By default, Lightsail will create a strong password for you. However,
    because this password can contain characters that make copying and pasting
    difficult, you will specify a password for this lab.

    Click =Specify login credentials=:
    + Leave =User name= with its default;
    + Deselect =Create strong password=; create a password of =taskstasks=.

    #+CINDEX:high-availability
26. One objective of this lab is to deploy a fault-tolerant and scalable
    implementation of the web application, so we will use a high availability
    database.  Select =High-availabilty= option.  Keep its default size.

27. Scroll to the =Identify your database= section.

28. Set =Identify your database= to =todo-db=.  Leave the master database name
    with its default value.

29. Click on =Create database=.

*** Set up a Load Balancer
#+CINDEX:load balancer, deploy
#+CINDEX:HTTP HTTPS
#+CINDEX:certificate, request free
#+CINDEX:AWS Certificate Manage (ACM)
In order to provide scalability and fault tolerance, you will deploy your web
front end behind a Lightsail load balancer.  Lightsail load balancers handle
both HTTP and HTTPS traffic on ports 80 and 443, respectively.  For HTTPS, you
can request a free certificate from AWS Certificate Manager (ACM) --- however,
configuring HTTPS connections is out of scope for this lab.

30. [@30]From the horizontal menu, click on =Networking=.

31. Click on =Create load balancer=; then configure:
    - Set =Identify your load balancer= to =todo-lb=;
    - Click on =Create load balancer=.


Those are the Lightsail resources.  Later will migrate from the Lightsail
database into an RDS database.

*** Deploy an Amazon RDS Database
#+CINDEX:Amazon Relational Database Service (RDS), deploy
Finally, you will deploy an Amazon Relational Database Service (Amazon RDS)
database.  Amazon RDS is a hosted database service that offers more advanced
features than Lightsail databases (multiple database engines, more instances
sizes, read replicas, etc).  As your application requirements change, you might
find that you need to move from an Amazon Lightsail database to Amazon
RDS.  Later in this lab, you will migrate your existing Amazon Lightsail
database to an Amazon RDS database.

32. [@32]Navigate to the [[https://console.aws.amazon.com/rds/home#GettingStarted:][Amazon RDS getting started page]].

33. Click on =Create database=;
    - Select the =MySQL= engine
    - Check the Free Tier options checkbox at the bottom
    - Click =Next=

34. Select the same engine as for Lightsail, =5.7.23=

35. Scroll to the bottom of the screen.

36. Configure =Settings= (need to match those for the Lightsail database):
    - =DB instance identifier=:  =todo-rds=
    - =Master username=: =dbmasteruser=
    - =Password=: =taskstasks= 

37. Make sure the RDS database is running in the default VPC.  Turn off =Public
    accessibility=.  Disable =Delete protection=.

38. Click =Create database=.

** Task 2---Deploy a Monolithic LAMP Application
{{{heading(Lesson 6. What Are You Going To Do?)}}}

#+CINDEX:LAMP stack application, deploy
#+CINDEX:deploy LAMP stack
#+CINDEX:PHP
#+CINDEX:MySQL
#+CINDEX:Apache server
#+CINDEX:database, MySQL
#+CINDEX:PHP front end, connect to MySQL database
In this task you will deploy a LAMP stack application into your previously
launched Amazon Lightsail instance by copying in the application code and
supplying the parameters to connect the PHP front end and the local MySQL
database.  When you are ﬁnished, both the Apache/PHP front end and the MySQL
database will be running on the same host.

#+attr_texinfo: :alt IMAGE: Monolithic Lightsail Application
#+caption:Monolithic
#+name:monolithic
#+texinfo:@ifnothtml
[[file:img/mono-LAMP-app-50.png]]
#+texinfo:@end ifnothtml
#+texinfo:@ifhtml
[[../img/mono-LAMP-app-50.png]]
#+texinfo:@end ifhtml

This demonstration video will take you step by step through the lab process.

[[file:./videos/task_2-deploy_LAMP_app.mp4]]

*** Deploy a LAMP Stack Application
#+CINDEX:deploy application code in Lightsail instance
#+CINDEX:configure PHP application
In this task, you will deploy the application code into your Lightsail
instance, as well as configure the connection between the PHP application and
the locally running MySQL database.

#+begin_quote
The following steps are performed from the LAMP instance command line by using
either your own SSH client, or the web-based SSH access provided by Lightsail.
#+end_quote

#+CINDEX:SSH into LAMP instance
39. [@39]SSH into the LAMP instance.

40. The LAMP Bitnami image has some default web pages installed, and you must
    remove them so you can deploy the PHP application.  Move into the Apache
    directory and remove the default web site installed by Lightsail
    : cd /opt/bitnami/apache2/htdocs
    : rm -rf *

41. Use the application ~wget~ to download the application code as a Zip file
    and then unzip:
    : wget https://s3-us-west-2.amazonaws.com/us-west-2-aws-training/awsu-spl/spl-220/scripts/todo.zip -O /tmp/todo.zip
    : unzip /tmp/todo.zip

42. This PHP application uses a config file called ~config.php~ to configure
    how the frontend talks to the database (hostname, username, password).
    That file needs to live in the ~configs/~ directory.  You need to create
    this directory and set its owner to ~bitnami~, which is the user and group
    that the Apache web server runs as, so that it will then be able to read
    the ~configs/~ file:
    : sudo mkdir /opt/bitnami/apache2/configs
    : sudo chown bitnami:bitnami /opt/bitnami/apache2/configs

    *As a best practice, never store sensitive information in the document root
    of your web server. Ideally, in production, you would use a secrets
    management solution, such as AWS Secrets Manager.*

43. Copy the default ~config.php~ file into the ~configs/~ directory:
    : sudo cp config.php ../configs
    : ls ../configs

44. Set environment variables to aid in editing the configuration file.  The
    default password for the instance database is stored in a file in the
    =home= directory (=/home/bitnami/bitnami_application_password=).
      : ENDPOINT=localhost && \
      : USERNAME=root && \
      : PASSWORD=$(cat /home/bitnami/bitnami_application_password)

45. Verify the environment variables:
      : echo "Endpoint = "$ENDPOINT
      : echo "Username = "$USERNAME
      : echo "Password = "$PASSWORD

46. Make a backup of the ~config.php~ file:
      : cp /opt/bitnami/apache2/configs/config.php /opt/bitnami/apache2/configs/config.php.bak

47. Create a new configuration file to work with the locally installed
    database.  The command below uses {{{command(sed)}}} to go through the
    configuration file and replace the placeholder values with the values of
    the environment variables you set in the previous step. It writes these
    values into a new file (~config.php.monolithic~).

#+BEGIN_SRC sh
cat /opt/bitnami/apache2/configs/config.php | \
sed -i ".monolithic" -e "s/<endpoint>/$ENDPOINT/; \
s/<username>/$USERNAME/; \
s/<password>/$PASSWORD/;"
#+END_SRC

48. [@48]Verify that the values are correct:
    : cat /opt/bitnami/apache2/configs/config.php

49. The ~config.php~ is now in production.

50. After the configuration file is updated, the PHP application should connect
    to the local database engine.

51. Prepare the database by installing it using an ~install.php~ script.

    In a real-world application, you would have defined processes on how to
    prepare the database for production.  In the case of the demonstration
    application, you need to run a PHP script.

    - Get the IP address of the Lightsail instance
    - Run the ~install.php~ script by navigating to that website in the browser
      : http://<IP-address>/install.php
    - The website will create a database

52. Navigate to the running application:
    : http://<IP-address>/

53. Use the =Add Task= button to add a few tasks.

** Task 3---Connect to an Amazon Lightsail Database
{{{heading(Lesson 7. What Are You Going to Do?)}}}

#+CINDEX:scalable, front end not
The ﬁrst iteration of the application's web front end is not inherently
scalable because the database and front end are located on the same machine.
It would be problematic to add additional database instances whenever
additional front-end capacity was needed.

#+CINDEX:separate front end, database
#+CINDEX:Lightsail database, point PHP front end to
#+CINDEX:MySQL database
To ﬁx this issue, the front end and database need to be separated.  In this
task, you will adjust the conﬁguration for the PHP front end to point to the
previously deployed Lightsail database.

{{{heading(Lightsail databases)}}}

- MySQL databases that are easy to create and manage
- Standard and high availability options
- Four instances sizes to choose from
- Public and private access
- Automated backups
- Fully managed solution--no need to manage or patch underlying system


#+attr_texinfo: :alt IMAGE: LAMP Application with Lightsail DB
#+texinfo:@ifnothtml
[[file:img/LAMP-lightsail-db-50.png]]
#+texinfo:@end ifnothtml
#+texinfo:@ifhtml
[[../img/LAMP-lightsail-db-50.png]]
#+texinfo:@end ifhtml

This demonstration video will take you step by step through the lab process.

[[file:./videos/task_3-connect_to_Lightsail_db.mp4]]

*** Reconfigure the front end to point at the new Lightsail database

54. [@54]From the horizontal menu in the Lightsail console home page, click
    =Databases=.

55. Click ~todo-db~.

56. Under the =Connections details=, copy the =Endpoint=; it will look
    something like:
    : ls-966d5bf6be8ee5178432a633398bf4256bfcab69.cucxkvhp11zu.us-west-2.rds.amazonaws.com

57. In the SSH-window, create an environment variable named
    {{{env(LS_ENDPOINT)}}} to hold the value of the endpoint of your database:
    : LS_ENDPOINT=$(pbpaste)

    #+CINDEX:environment variables, Lightsail database
58. Create an environment variable for the default user name (~dbmasteruser~)
    and the password (~taskstasks~):
    : LS_USERNAME=dbmasteruser
    : LS_PASSWORD=taskstasks

59. Verify the environment variables are set correctly:
    : echo "Endpoint ="$LS_ENDPOINT
    : echo "Username ="$LS_USERNAME
    : echo "Password ="$LS_PASSWORD

    #+CINDEX:configuration file, Lightsail database
60. Create a new configuration file that points to the Lightsail database:

    #+BEGIN_SRC sh
    cat /opt/bitnami/apache2/configs/config.php.bak | \
    sed "s/<endpoint>/$LS_ENDPOINT/; \
    s/<username>/$LS_USERNAME/;
    s/<password>/$LS_PASSWORD/;" \
    >> /opt/bitnami/apache2/configs/config.php.lightsail_db
    #+END_SRC

61. Verify that the file was modified properly:
    : cat /opt/bitnami/apache2/configs/config.php.lightsail_db

62. Activate the new configuration
    : cp /opt/bitnami/apache2/configs/config.php.lightsail_db /opt/bitnami/apache2/configs/config.php

63. Verify:
    : cat /opt/bitnami/apache2/configs/config.php

    #+CINDEX:install Lightsail database
64. In a new browser tab run the ~install.php~ script to configure the
    database:
    : http://<IP-address>/install.php

65. Test the new database:
    : http://<IP-address>
    There should not be any tasks displayed.

    #+CINDEX:migrate data to Lightsail database
    Migrate the data out of your local MySQL database and into the Lightsail
    database.  This is accomplished using two command line utilities:
    ~mysqldump~ and ~mysql~.  ~mysqldump~ extracts the content from the local
    database and pipes it into ~mysql~, which loads the input into the
    Lightsail database.

    #+BEGIN_SRC sh
    mysqldump -u root \
      --databases tasks \
      --single-transaction \
      --compress \
      --order-by-primary  \
      -p$(cat /home/bitnami/bitnami_application_password) \
      | mysql -u $LS_USERNAME \
      --port=3306 \
      --host=$LS_ENDPOINT \
      -p$LS_PASSWORD
    #+END_SRC

    You will see two warnings regarding supplying a password via the command
    line. These warnings can safely be ignored, but note that, in production,
    you shouldn't supply passwords via the command line, especially in scripts.

66. Refresh the web page, and you should see that the tasks you originally
    created are now present in the database that's managed by Lightsail.

** Task 4---Scaling the PHP Front End
{{{heading(Lesson 8. What are You Going to Do?)}}}

#+CINDEX:scalability, add
#+CINDEX:fault tolerance, add
Now that you have the front end and database separated, let's take a look at
how we can add some scalability and fault tolerance to the web tier.

{{{subheading(Deploy Additional Web Tier Instances)}}}

#+CINDEX:instances, deploy additional
In this section, you will take a snapshot of the web front end, and deploy two
additional web tier instances from that snapshot.

{{{subheading(Add a Load Balancer)}}}

#+CINDEX:load balancer, add
#+CINDEX:web application, two-tier
#+CINDEX:two-tier web application
Finally, you will add a load balancer in front of the three web instances.
When this task is complete, you will have a scaled-out and fault-tolerant
version of a sample two-tier web application.

After you complete this task, you will have a scaled-out and fault-tolerant
version of a sample two-tier web application.

{{{heading(Amazon Lightsail Load Balancers)}}}

- Simple version of Amazon Elastic Load Balancer (ELB)
- Can be set up in a few clicks
- Have easy Secure Sockets Layer (SSL) certificates
- Handle HTTP or HTTPS traffic
- Balance traffic across ports 80 and 443


{{{heading(Horizontal Scaling with Snapshots)}}}

- Create a copy of Amazon Lightsail instance's system disk includes instance
  configuration information (processing power, memory, data transfer, and disk
  size)
- Deploy a new identical instance or scale an instance to a larger size (cannot
  scale down)
- Allow for Lightsail instances to be exported to Amazon Elastic Compute Cloud
  (Amazon EC2)


#+attr_texinfo: :alt IMAGE: Scaled LAMP Application
#+texinfo:@ifnothtml
[[file:img/scaled-LAMP-50.png]]
#+texinfo:@end ifnothtml
#+texinfo:@ifhtml
[[../img/scaled-LAMP-50.png]]
#+texinfo:@end ifhtml

This demonstration video will take you step by step through the lab process.

[[file:./videos/task_4-scale_PHP_front_end.mp4]]

*** Scale the Front End
#+CINDEX:snapshots, create
Lightsail makes it straightforward to create snapshots of your instances with a
single click.  These snapshots can be used to back up and restore instances,
scale up instance sizes, and/or to deploy a new instance.

67. [@67]Return to the Lightsail console home page.

68. Next to ~PHP-fe-1~:
    - Click the three dots;
    - Click =Manage=

69. From the horizontal menu, click =Snapshots=.

70. Click =Create snapshot=.

71. Wait for the process to complete before moving forward.  This can take up
    to 5 minutes.

    #+CINDEX:create new instances
    #+CINDEX:new instances, create
    #+CINDEX:instances, create new
72. To the right of your snapshot:
    - Click the three dots;
    - Click =Create new instance=

73. Scroll down to the =Identify your instance= section.

74. Below =Identify your instance=:
    - Enter ~PHP-fe-2~
    - Click =Create instance=

75. Repeat the previous three steps to create a third front-end instance using
    your snapshot.  Name this new instance ~PHP-fe-3~.

76. Test the public IP address of each of the two newly created front-end
    instances in your web browser.  Notice that the hostname for that
    particular web front-end instance is listed under your task list, and that
    it changes based on which instance you visit in your web browser.

*** Load-balance the Front End

77. [@77]Return to the Lightsail console home page.

78. From the horizontal menu click =Networking=, then click the three dots,
    then select =Manage=.

79. Under the =Target instances=
    - Select ~PHP-fe-1~
    - Click =Attach=

80. Click =Attach another=

81. Repeat these steps for ~PHP-fe-2~ and ~PHP-fe-3~.  Wait for them all to
    pass their health checks before moving on.

82. Scroll up to the top of the screen.

    #+CINDEX:DNS name
83. Copy your =DNS name=.

    Your =DNS name= should look similar to
    =82f80d8b8bf5f434083381be722632d2-1378146635.us-west-2.elb.amazonaws.com=.
    This is the URL for your Lightsail load balancer.  Any requests to this URL
    will be routed to one of your three front-end instances.

84. Paste the string into the web browser, and the application should load.

85. Reload the page.

86. Notice how the hostname at the bottom of the screen changes.  This
    indicates that traffic is being routed appropriately.

** Task 5---Migrating to Amazon Relational Database Service
{{{heading(Lesson 9. What are You Going to Do?)}}}

#+CINDEX:AWS services, move or migrate into other
#+CINDEX:migrate into other AWS services
#+CINDEX:Amazon RDS database
At some point, your application needs might require features not found in
Amazon Lightsail.  Fortunately, it is straightforward to move one or all of the
parts of your application into other AWS services.

In this task, you will migrate the database component from Amazon Lightsail
over to the Amazon Relational Database Service (Amazon RDS).

To migrate the database, you will need to:
- Add the IP address range (Classless Inter-Domain Routing, or CIDR, range) of
  the Amazon Lightsail VPC to your Amazon RDS security group
- Enable VPC peering in Amazon Lightsail
- Migrate your data from your Amazon Lightsail database to your Amazon RDS
  database


This process will leave you with an architecture where the front end runs on an
Amazon Lightsail instance, but the database is now managed by Amazon RDS.

{{{heading(Amazon RDS)}}}

- Relational database service in the cloud
- Resizable capacity
- Administrative tasks are automated
- Fast performance
- High availability


#+attr_texinfo: :alt IMAGE: Scaled LAMP App with RDS DB
#+texinfo:@ifnothtml
[[file:img/LAMP-RDS-50.png]]
#+texinfo:@end ifnothtml
#+texinfo:@ifhtml
[[../img/LAMP-RDS-50.png]]
#+texinfo:@end ifhtml

This demonstration video will take you step by step through the lab process.

[[file:./videos/migrate.mp4]]

*** Modify the RDS Security Group
#+CINDEX:RDS Security Group, modify
#+CINDEX:Lightsail VPC address range
#+CINDEX:VPC, Lightsail address range
#+CINDEX:address range for Lightsail VPC
The first step in migrating the database component to Amazon RDS is to ensure
that traffic coming from the Amazon Lightsail VPC is allowed to reach Amazon
RDS. This step is done by adding the IP address range (=172.26.0.0/16=) of the
Amazon Lightsail VPC to the existing Amazon RDS security group.

#+CINDEX:RDS databases page
87. [@87]Navigate to the [[https://console.aws.amazon.com/rds/home#databases:][Amazon RDS databases page]].

88. From the list of databases, click ~task-db~.

    #+CINDEX:VPC security group
89. Under the =Connectivity= section, click your =VPC security group=.

    Your VPC security group will look similar to /rds-launch-wizard
    (sg-05fde746966bcff7d)/.

90. Click the =Inbound= tab.

    #+CINDEX:rules defining inbound traffic
    This will allow you to access the rules that define what traffic is allowed
    to reach the Amazon RDS database.

91. Click =Edit=

92. Click =Add rule= then configure:
    - =Type:= /MYSQL/Aurora/
    - =Source:= /Custom / =172.26.0.0/16=

93. Click =Save=.

*** Enable Virtual Private Cloud (VPC) Peering
#+CINDEX:peering, VPC
#+CINDEX:VPC peering
The next step is to ensure that the Lightsail VPC can communicate with your
default AWS VPC.  By default, services in AWS cannot access services that run
in Amazon Lightsail (and vice versa).  However, this situation can be addressed
by using a feature called VPC peering.  {{{dfn(VPC)}}} peering makes it
possible for certain AWS services to communicate with Amazon Lightsail
resources (in this case, the Amazon RDS database will communicate with the web
front end, which runs on an Amazon Lightsail instance).

94. [@94]Navigate to the Amazon Lightsail account settings page.

95. From the horizontal menu, click =Advanced=.

96. Scroll down to the =VPC peering= section.

97. Next to the region that you deployed your Lightsail resources, select
    =Enable VPC peering=.

*** Reconﬁgure the Database Connection
In this task, you will again update your application configuration file
(~config.php~) to point to the Amazon RDS database.

Because your current Lightsail instances all run under a load balancer, it
would be unwise to reconfigure only some of them to point to the Amazon RDS
database.  Doing so could result in a situation where the load balancer would
present some front ends that connect to the Lightsail database, and other front
ends that connect to the Amazon RDS database.

To avoid this situation, you will deploy a new PHP front end instance based on
your existing snapshot, and then modify that instance.

98. [@98]Navigate to the Lightsail snapshots page.

99. Next to ~PHP-fe-1~:
    - Expand => Instance snapshot=
    - Click the three dots
    - Click =Create new instance=

100. Name the instance ~php-fe-rds~.

101. Scroll to the bottom of the screen and click =Create instance=.

     Now that you have a new instance to work from, you can reconfigure the
     configuration file to point to the Amazon RDS database.

102. Connect to the ~php-fe-rds~ instance through SSH.

103. Navigate to the Amazon RDS databases page.

104. From the list of databases, click the name of the Amazon RDS database you
     created earlier (the suggested name for this database was ~tasks-db~ to
     access the database details screen.

105. In the =Connectivity= section, copy your /Endpoint/.

     - Your /Endpoint/ should look similar to
       /tasks-db.cdih0wyzznav.us-west-2.rds.amazonaws.com/

106. Return to the SSH session for the ~php-fe-rds~ instance.

107. Create an environment variable ({{{env(RDS_ENDPOINT)}}}) to hold the value
     of your RDS database endpoint by:
     : RDS_ENDPOINT=<rds-endpoint>

108. Set environment variables for the default user name (~dbmasteruser~) and
     the password (~taskstasks~):
     : RDS_USERNAME=dbmasteruser
     : RDS_PASSWORD=taskstasks

109. Verify the environment variables are set correctly:
     : echo "Endpoint = "$RDS_ENDPOINT
     : echo "Username = "$RDS_USERNAME
     : echo "Password = "$RDS_PASSWORD

110. Create a new configuration file that points to the Amazon RDS database:
     #+BEGIN_SRC sh
     cat /opt/bitnami/apache2/configs/config.php.bak | \
         sed "s/<endpoint>/$RDS_ENDPOINT/; \
         s/<username>/$RDS_USERNAME/; \
         s/<password>/$RDS_PASSWORD/;" \
         > /opt/bitnami/apache2/configs/config.php.rds_db
     #+END_SRC

111. Activate the new configuration by replacing the existing ~config.php~ with
     the new version:
     : cp /opt/bitnami/apache2/configs/config.php.rds_db /opt/bitnami/apache2/configs/config.php

112. Verify the values of the new ~config.php~ file:
     : cat /opt/bitnami/apache2/configs/config.php

113. In a browser tap install the new database:
     : http://PHP-FE-RDS/install.php

     You should get the following error:
     : SQLSTATE[HY000] [1049] Unknown database 'tasks'
     This is because while you can reach the Amazon RDS server, the 'tasks'
     database has not yet been created.

114. In the final step, you will migrate the data from your Amazon Lightsail
     database into your Amazon RDS database.

     In the SSH window create an environment variable name
     {{{env(LS_ENDPOINT)}}} to hold the value of the endpoint of your database.
     : LS_ENDPOINT=<IP-address>

     Your variable should look similar to:
     : LS_ENDPOINT='ls-966d5bf6be8ee5178432a633398bf4256bfcab69.cucxkvhp11zu.us-west-2.rds.amazonaws.com'

115. Set environment variables for the default user name (~dbmasteruser~) and
     the password (~taskstasks~):
     : LS_USERNAME=dbmasteruser
     : LS_PASSWORD=taskstasks

116. Check to make sure the environment variables are set correctly (the output
     from the command below should match the values you just set for the LS
     endpoint, the user name, and the password):
     : echo "Endpoint = "$LS_ENDPOINT
     : echo "username = "$LS_USERNAME
     : echo "Password = "$RDS_PASSWORD

117. Issue the following command to export the database file into a file
     ~tasks.sql~:
     #+BEGIN_SRC sh
     mysqldump -u $LS_USERNAME \
        --host $LS_ENDPOINT \
        --databases tasks \
        --single-transaction \
        --compress \
        --order-by-primary  \
        --set-gtid-purged=OFF \
        -p$LS_PASSWORD  > tasks.sql
     #+END_SRC

118. Access your RDS instance via the ~mysql~ command line tool:
     #+BEGIN_SRC sh
     mysql -u $RDS_username \
       --port=3306 \
       --host=$RDS_ENDPOINT \
       -p$RDS_PASSWORD
     #+END_SRC

119. Import the previously created database dump file into MySQL:
     : source tasks.sql

120. In a browser tab:
     : http://<IP-address>

     You should see that the tasks you created originally are now present in
     the database that is managed by Amazon RDS.

     From this point, you could repeat the steps from Task 4 and create a new
     snapshot from your ~php-fe-rds~ instance, deploy two new instances from
     that new snapshot, and replace the existing instances in your load
     balancer with your three new instances that use Amazon RDS.

     This process would give you a redundant web front end that runs in Amazon
     Lightsail, with the database running in Amazon RDS.  However, for this lab
     you will not do that.

** Task 6---Upgrading to Amazon Elastic Cmpute Cloud
{{{heading(Lesson 10. What are You Going to Do?)}}}

#+CINDEX:upgrade Lightsail instance to EC2 instance
#+CINDEX:Elastic Compute Cloud EC2
In the previous section, you worked through how to migrate an Amazon Lightsail
database to Amazon Relational Database Service (Amazon RDS).  In this ﬁnal lab,
you will upgrade your Amazon Lightsail instance to Amazon Elastic Compute Cloud
(Amazon EC2).

To perform this upgrade you will:
- Create a snapshot of your web front-end instance that uses Amazon RDS
- Export that snapshot to Amazon EC2
- Create a new Amazon EC2 instance from the exported snapshot
- Update the Amazon RDS security group to include the security group for your
  Amazon EC2 instance


After you complete this task, the application can take advantage of the full
set of features that are offered by other AWS services, such as Amazon EC2 and
Amazon RDS.

{{{heading(Amazon EC2)}}}

- Offers secure, resizable compute capacity in the cloud
- Can quickly scale capacity
- Reduces the time required to obtain and boot new server instances


#+attr_texinfo: :alt IMAGE: LAMP Stack on EC2 with RDS DB
#+texinfo:@ifnothtml
[[file:img/LAMP-EC2-RDS-50.png]]
#+texinfo:@end ifnothtml
#+texinfo:@ifhtml
[[../img/LAMP-EC2-RDS-50.png]]
#+texinfo:@end ifhtml

This demonstration video will take you step by step through the lab process.

[[file:./videos/task_6-upgrade_to_EC2.mp4]]

*** Export the Lightsail Snapshot
When you upgrade your Amazon Lightsail instance to an Amazon EC2 instance, the
first step is to create a new snapshot and then export that snapshot to Amazon
EC2.

121. [@121]Return to the Lightsail console home page.

122. Next to the ~php-fe-rds~ instance:
     - Click the three dots;
     - Click =Manage=

123. From the horizontal menu, click =Snapshots=.

124. Click the =Create snapshot=.

125. Wait for the snapshot to finish being creating before moving on.

126. To the right of the snapshot:
     - Click the three dots;
     - Click =Export to Amazon EC2=

       #+CINDEX:Amazon Machine Image (AMI)
       #+CINDEX:AMI
       This will start an operation that will create a new Amazon machine image
       (AMI) based on the Amazon Lightsail snapshot.  The new AMI will be
       created in the same region as the existing Lightsail snapshot.

127. At the first dialog, click =Yes, continue=.

128. At the next dialog, click =Acknowledged=.

129. At the top of the Amazon Lightsail homepage, a set of gears will start
     spinning.  Click the gears to see the current status of the export
     operation.

*** Create an Amazon EC2 Instance
When the gears stop spinning on the top of the Amazon Lightsail home page, you
can continue to the final step of deploying the actual Amazon EC2 instance.

130. [@130]Return to the Lightsail console home page.

131. At the top of the page, click the gears and select =Open the Amazon EC2
     console=.  This will launch the Amazon EC2 console to the AMI page, with
     your newly created AMI selected.

132. Click the =Launch= button.

133. From the bottom of the next screen, click =Next: Configure Instance Details=

134. Ensure the new instance is being created in the default VPC.

135. Click =Next: Add Storage=

136. Click =Next: Add Tags=

137. The web front end needs to be accessible from the internet, so you need to
     open incoming access for HTTP (port 80) in the security group.

     Click =Next: Configure Security Group=

138. Provide the values for the security group name and description.

139. Click =Add Rule= then configure:
     - =Type=: /HTTP/
     - Click =Review and Launch=

140. Click =Launch=

141. On the key pair screen, you can either create a new key pair or use an
     existing one.  You don't need to use SSH to access the instance for this
     lab — so it doesn't matter which one you pick but - if you don't have an
     existing key pair, you must create a new one.

142. Select =I acknowledge that...=

143. Click =Launch Instances=

144. Click =View Instances=

145. Copy the =IPv4 Public IP= address to your clipboard.

146. Wait for the instances to display:
     - =Instance Status:= /running/
     - =Status Checks:= /2//2 checks passed/

*** Update the Amazon RDS Security Group
When you configure the new Amazon EC2 instance to access the Amazon RDS
database, the final step is to add the instance security group to the Amazon
RDS security group.  This process is very similar to what you did earlier when
you added the Amazon Lightsail IP address range to the Amazon RDS security
group.

147. [@147]Go to the details page for the Amazon EC2 instance and ensure your
     new instance is selected.

148. Click the =Description= tab.

149. Next to the =Security groups=, click your security group.

150. Copy the =Group ID= to your clipboard.

151. Navigate to the Amazon RDS databases page.

152. From the list of databases, click the name of the Amazon RDS database you
     created earlier to access the database details screen.

153. Ensure the =Connectivity= tab is selected.

154. In the =Connectivity= section, click the name of the security group for
     your RDS database.

155. Click the =Inbound= tab to access the rules that define which traffic is
     allowed to reach the RDS database.

156. Click =Edit=

157. Click =Add Rule= then configure:
     - =Type:= /MYSQL//Aurora/
     - =CIDR, IP or Security Group:/ Paste in the value of the EC2 instance
       security group you noted previously.
     - Click =Save=

158. Navigate to the IP address of your EC2 instance, and you should see the
     todo application up and running.

** Task 7---Cleanup
Although we clean up all resources when you use our lab platform, you would
incur additional charges if you create these resources in your personal account
and do not delete them. To clean up these resources, follow these steps.

159. [@159]Return to the Lightsail console home.

160. Delete the four Lightsail instances you created by clicking the three dots
     for each instance and choosing =Delete=.  Confirm each delete =Yes,
     Delete=.

161. From the horizontal menu, click =Networking=.

162. On the ~todo-lb~ load balancer, click the three dots and choose =Delete=.
     Confirm.

163. Click =Home=, then from the horizontal menu, select =Snapshots=.

164. Click the three dots for each snapshot you created and choose =Delete
     snapshot= for each one.  Confirm.

165. Click =Home= and then, from the horizontal menu, select =Databases=.

166. Click the three dots on the database you created and choose =Delete=.
     Conform.

167. Go to the RDS console and delete the RDS database.

168. Go to the EC2 console and delete the EC2 instance and its related security
     groups.

** Conclusion
Congratulations! You now have successfully:

- Created the infrastructure used in all the tasks

- Deployed a two-tier LAMP stack application as a monolith in a single
  Lightsail instance

- Rearchitected the application by separating the front end from the database

- Scaled and load-balanced the web front end

- Moved your application to other AWS services by:

  + Creating and using an Amazon RDS database

  + Moving your front end to Amazon EC2


*** End Lab
Follow these steps to close the console, end your lab, and evaluate the
experience.

169. [@169]Return to the AWS Management Console.

170. On the navigation bar, click *<yourusername>@<AccountNumber>*, and then
     click =Sign Out=.

171. Click =End Lab=.

172. Click =OK=.

Thank you for participating in this Amazon Lightsail lab exercise.  We hope you
have a better understanding of Amazon Lightsail and how it could benefit you.

* Concept Index
:PROPERTIES:
:index:    cp
:unnumbered: t
:END:
* Export Settings                                                  :noexport:
#+TEXINFO_FILENAME:deploy_with_lightsail.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+SUBTITLE:AWS Certification and Training
#+SUBAUTHOR:
#+TEXINFO_DIR_CATEGORY:WebDev
#+TEXINFO_DIR_TITLE:Amazon Lightsail
#+TEXINFO_DIR_DESC:Deploying a cloud application on Amazon using Lightsail
#+TEXINFO_PRINTED_TITLE:Amazon Lightsail: Deploying and scaling your first cloud application
* Macro Definitions                                                :noexport:
#+macro: heading @@texinfo:@heading $1@@
#+macro: subheading @@texinfo:@subheading $1@@
#+macro: cite @@texinfo:@cite{$1}@@
#+macro: command @@texinfo:@command{$1}@@
#+macro: env @@texinfo:@env{$1}@@
#+macro: dfn @@texinfo:@dfn{$1}@@
